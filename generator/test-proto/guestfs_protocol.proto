/* libguestfs generated file -*- c -*-
 * WARNING: THIS FILE IS GENERATED FROM:
 *   generator/ *.ml
 * ANY CHANGES YOU MAKE TO THIS FILE WILL BE LOST.
 *
 * Copyright (C) 2009-2015 Red Hat Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

/* This file defines the protocol used between the library and
 * the appliance/daemon.  For more information see the COMMUNICATION
 * PROTOCOL section in guestfs(3).  Note this protocol is internal
 * to libguestfs and may change at any time.
 */

/* Internal structures. */

message GuestfsIntIntBool {
  required int32 i = 1;
  required int32 b = 2;
}

message GuestfsIntIntBoolList {
  repeated GuestfsIntIntBool vals = 1;}

message GuestfsIntPV {
  required string pv_name = 1;
  required bytes pv_uuid = 2;
  required string pv_fmt = 3;
  required int64 pv_size = 4;
  required int64 dev_size = 5;
  required int64 pv_free = 6;
  required int64 pv_used = 7;
  required string pv_attr = 8;
  required int64 pv_pe_count = 9;
  required int64 pv_pe_alloc_count = 10;
  required string pv_tags = 11;
  required int64 pe_start = 12;
  required int64 pv_mda_count = 13;
  required int64 pv_mda_free = 14;
}

message GuestfsIntPVList {
  repeated GuestfsIntPV vals = 1;}

message GuestfsIntVG {
  required string vg_name = 1;
  required bytes vg_uuid = 2;
  required string vg_fmt = 3;
  required string vg_attr = 4;
  required int64 vg_size = 5;
  required int64 vg_free = 6;
  required string vg_sysid = 7;
  required int64 vg_extent_size = 8;
  required int64 vg_extent_count = 9;
  required int64 vg_free_count = 10;
  required int64 max_lv = 11;
  required int64 max_pv = 12;
  required int64 pv_count = 13;
  required int64 lv_count = 14;
  required int64 snap_count = 15;
  required int64 vg_seqno = 16;
  required string vg_tags = 17;
  required int64 vg_mda_count = 18;
  required int64 vg_mda_free = 19;
}

message GuestfsIntVGList {
  repeated GuestfsIntVG vals = 1;}

message GuestfsIntLV {
  required string lv_name = 1;
  required bytes lv_uuid = 2;
  required string lv_attr = 3;
  required int64 lv_major = 4;
  required int64 lv_minor = 5;
  required int64 lv_kernel_major = 6;
  required int64 lv_kernel_minor = 7;
  required int64 lv_size = 8;
  required int64 seg_count = 9;
  required string origin = 10;
  required float snap_percent = 11;
  required float copy_percent = 12;
  required string move_pv = 13;
  required string lv_tags = 14;
  required string mirror_log = 15;
  required string modules = 16;
}

message GuestfsIntLVList {
  repeated GuestfsIntLV vals = 1;}

message GuestfsIntStat {
  required int64 dev = 1;
  required int64 ino = 2;
  required int64 mode = 3;
  required int64 nlink = 4;
  required int64 uid = 5;
  required int64 gid = 6;
  required int64 rdev = 7;
  required int64 size = 8;
  required int64 blksize = 9;
  required int64 blocks = 10;
  required int64 atime = 11;
  required int64 mtime = 12;
  required int64 ctime = 13;
}

message GuestfsIntStatList {
  repeated GuestfsIntStat vals = 1;}

message GuestfsIntStatNS {
  required int64 st_dev = 1;
  required int64 st_ino = 2;
  required int64 st_mode = 3;
  required int64 st_nlink = 4;
  required int64 st_uid = 5;
  required int64 st_gid = 6;
  required int64 st_rdev = 7;
  required int64 st_size = 8;
  required int64 st_blksize = 9;
  required int64 st_blocks = 10;
  required int64 st_atime_sec = 11;
  required int64 st_atime_nsec = 12;
  required int64 st_mtime_sec = 13;
  required int64 st_mtime_nsec = 14;
  required int64 st_ctime_sec = 15;
  required int64 st_ctime_nsec = 16;
  required int64 st_spare1 = 17;
  required int64 st_spare2 = 18;
  required int64 st_spare3 = 19;
  required int64 st_spare4 = 20;
  required int64 st_spare5 = 21;
  required int64 st_spare6 = 22;
}

message GuestfsIntStatNSList {
  repeated GuestfsIntStatNS vals = 1;}

message GuestfsIntStatVFS {
  required int64 bsize = 1;
  required int64 frsize = 2;
  required int64 blocks = 3;
  required int64 bfree = 4;
  required int64 bavail = 5;
  required int64 files = 6;
  required int64 ffree = 7;
  required int64 favail = 8;
  required int64 fsid = 9;
  required int64 flag = 10;
  required int64 namemax = 11;
}

message GuestfsIntStatVFSList {
  repeated GuestfsIntStatVFS vals = 1;}

message GuestfsIntDirent {
  required int64 ino = 1;
  required int32 ftyp = 2;
  required string name = 3;
}

message GuestfsIntDirentList {
  repeated GuestfsIntDirent vals = 1;}

message GuestfsIntVersion {
  required int64 major = 1;
  required int64 minor = 2;
  required int64 release = 3;
  required string extra = 4;
}

message GuestfsIntVersionList {
  repeated GuestfsIntVersion vals = 1;}

message GuestfsIntXAttr {
  required string attrname = 1;
  required bytes attrval = 2;
}

message GuestfsIntXAttrList {
  repeated GuestfsIntXAttr vals = 1;}

message GuestfsIntINotifyEvent {
  required int64 in_wd = 1;
  required uint32 in_mask = 2;
  required uint32 in_cookie = 3;
  required string in_name = 4;
}

message GuestfsIntINotifyEventList {
  repeated GuestfsIntINotifyEvent vals = 1;}

message GuestfsIntPartition {
  required int32 part_num = 1;
  required int64 part_start = 2;
  required int64 part_end = 3;
  required int64 part_size = 4;
}

message GuestfsIntPartitionList {
  repeated GuestfsIntPartition vals = 1;}

message GuestfsIntApplication {
  required string app_name = 1;
  required string app_display_name = 2;
  required int32 app_epoch = 3;
  required string app_version = 4;
  required string app_release = 5;
  required string app_install_path = 6;
  required string app_trans_path = 7;
  required string app_publisher = 8;
  required string app_url = 9;
  required string app_source_package = 10;
  required string app_summary = 11;
  required string app_description = 12;
}

message GuestfsIntApplicationList {
  repeated GuestfsIntApplication vals = 1;}

message GuestfsIntApplication2 {
  required string app2_name = 1;
  required string app2_display_name = 2;
  required int32 app2_epoch = 3;
  required string app2_version = 4;
  required string app2_release = 5;
  required string app2_arch = 6;
  required string app2_install_path = 7;
  required string app2_trans_path = 8;
  required string app2_publisher = 9;
  required string app2_url = 10;
  required string app2_source_package = 11;
  required string app2_summary = 12;
  required string app2_description = 13;
  required string app2_spare1 = 14;
  required string app2_spare2 = 15;
  required string app2_spare3 = 16;
  required string app2_spare4 = 17;
}

message GuestfsIntApplication2List {
  repeated GuestfsIntApplication2 vals = 1;}

message GuestfsIntISOInfo {
  required string iso_system_id = 1;
  required string iso_volume_id = 2;
  required uint32 iso_volume_space_size = 3;
  required uint32 iso_volume_set_size = 4;
  required uint32 iso_volume_sequence_number = 5;
  required uint32 iso_logical_block_size = 6;
  required string iso_volume_set_id = 7;
  required string iso_publisher_id = 8;
  required string iso_data_preparer_id = 9;
  required string iso_application_id = 10;
  required string iso_copyright_file_id = 11;
  required string iso_abstract_file_id = 12;
  required string iso_bibliographic_file_id = 13;
  required int64 iso_volume_creation_t = 14;
  required int64 iso_volume_modification_t = 15;
  required int64 iso_volume_expiration_t = 16;
  required int64 iso_volume_effective_t = 17;
}

message GuestfsIntISOInfoList {
  repeated GuestfsIntISOInfo vals = 1;}

message GuestfsIntMDStat {
  required string mdstat_device = 1;
  required int32 mdstat_index = 2;
  required string mdstat_flags = 3;
}

message GuestfsIntMDStatList {
  repeated GuestfsIntMDStat vals = 1;}

message GuestfsIntBTRFSSubvolume {
  required uint64 btrfssubvolume_id = 1;
  required uint64 btrfssubvolume_top_level_id = 2;
  required string btrfssubvolume_path = 3;
}

message GuestfsIntBTRFSSubvolumeList {
  repeated GuestfsIntBTRFSSubvolume vals = 1;}

message GuestfsIntXFSInfo {
  required string xfs_mntpoint = 1;
  required uint32 xfs_inodesize = 2;
  required uint32 xfs_agcount = 3;
  required uint32 xfs_agsize = 4;
  required uint32 xfs_sectsize = 5;
  required uint32 xfs_attr = 6;
  required uint32 xfs_blocksize = 7;
  required uint64 xfs_datablocks = 8;
  required uint32 xfs_imaxpct = 9;
  required uint32 xfs_sunit = 10;
  required uint32 xfs_swidth = 11;
  required uint32 xfs_dirversion = 12;
  required uint32 xfs_dirblocksize = 13;
  required uint32 xfs_cimode = 14;
  required string xfs_logname = 15;
  required uint32 xfs_logblocksize = 16;
  required uint32 xfs_logblocks = 17;
  required uint32 xfs_logversion = 18;
  required uint32 xfs_logsectsize = 19;
  required uint32 xfs_logsunit = 20;
  required uint32 xfs_lazycount = 21;
  required string xfs_rtname = 22;
  required uint32 xfs_rtextsize = 23;
  required uint64 xfs_rtblocks = 24;
  required uint64 xfs_rtextents = 25;
}

message GuestfsIntXFSInfoList {
  repeated GuestfsIntXFSInfo vals = 1;}

message GuestfsIntUTSName {
  required string uts_sysname = 1;
  required string uts_release = 2;
  required string uts_version = 3;
  required string uts_machine = 4;
}

message GuestfsIntUTSNameList {
  repeated GuestfsIntUTSName vals = 1;}

message GuestfsIntHivexNode {
  required int64 hivex_node_h = 1;
}

message GuestfsIntHivexNodeList {
  repeated GuestfsIntHivexNode vals = 1;}

message GuestfsIntHivexValue {
  required int64 hivex_value_h = 1;
}

message GuestfsIntHivexValueList {
  repeated GuestfsIntHivexValue vals = 1;}

message GuestfsIntInternalMountable {
  required int32 im_type = 1;
  required string im_device = 2;
  required string im_volume = 3;
}

message GuestfsIntInternalMountableList {
  repeated GuestfsIntInternalMountable vals = 1;}

/* Function arguments and return values. */

message GuestfsMountArgs {
  required string mountable = 1;
  required string mountpoint = 2;
}

message GuestfsTouchArgs {
  required string path = 1;
}

message GuestfsLlArgs {
  required string directory = 1;
}

message GuestfsLlRet {
  required string listing = 1;
}

message GuestfsListDevicesRet {
  repeated string devices = 1;
}

message GuestfsListPartitionsRet {
  repeated string partitions = 1;
}

message GuestfsPvsRet {
  repeated string physvols = 1;
}

message GuestfsVgsRet {
  repeated string volgroups = 1;
}

message GuestfsLvsRet {
  repeated string logvols = 1;
}

message GuestfsPvsFullRet {
  required GuestfsIntPVList physvols = 1;
}

message GuestfsVgsFullRet {
  required GuestfsIntVGList volgroups = 1;
}

message GuestfsLvsFullRet {
  required GuestfsIntLVList logvols = 1;
}

message GuestfsAugInitArgs {
  required string root = 1;
  required int32 flags = 2;
}

message GuestfsAugDefvarArgs {
  required string name = 1;
  repeated string expr = 2;
}

message GuestfsAugDefvarRet {
  required int32 nrnodes = 1;
}

message GuestfsAugDefnodeArgs {
  required string name = 1;
  required string expr = 2;
  required string val = 3;
}

message GuestfsAugDefnodeRet {
  required GuestfsIntIntBool nrnodescreated = 1;
}

message GuestfsAugGetArgs {
  required string augpath = 1;
}

message GuestfsAugGetRet {
  required string val = 1;
}

message GuestfsAugSetArgs {
  required string augpath = 1;
  required string val = 2;
}

message GuestfsAugInsertArgs {
  required string augpath = 1;
  required string label = 2;
  required bool before = 3;
}

message GuestfsAugRmArgs {
  required string augpath = 1;
}

message GuestfsAugRmRet {
  required int32 nrnodes = 1;
}

message GuestfsAugMvArgs {
  required string src = 1;
  required string dest = 2;
}

message GuestfsAugMatchArgs {
  required string augpath = 1;
}

message GuestfsAugMatchRet {
  repeated string matches = 1;
}

message GuestfsAugLsArgs {
  required string augpath = 1;
}

message GuestfsAugLsRet {
  repeated string matches = 1;
}

message GuestfsRmArgs {
  required string path = 1;
}

message GuestfsRmdirArgs {
  required string path = 1;
}

message GuestfsRmRfArgs {
  required string path = 1;
}

message GuestfsMkdirArgs {
  required string path = 1;
}

message GuestfsMkdirPArgs {
  required string path = 1;
}

message GuestfsChmodArgs {
  required int32 mode = 1;
  required string path = 2;
}

message GuestfsChownArgs {
  required int32 owner = 1;
  required int32 group = 2;
  required string path = 3;
}

message GuestfsExistsArgs {
  required string path = 1;
}

message GuestfsExistsRet {
  required bool existsflag = 1;
}

message GuestfsIsFileArgs {
  required string path = 1;
  required bool followsymlinks = 2;
}

message GuestfsIsFileRet {
  required bool fileflag = 1;
}

message GuestfsIsDirArgs {
  required string path = 1;
  required bool followsymlinks = 2;
}

message GuestfsIsDirRet {
  required bool dirflag = 1;
}

message GuestfsPvcreateArgs {
  required string device = 1;
}

message GuestfsVgcreateArgs {
  required string volgroup = 1;
  repeated string physvols = 2;
}

message GuestfsLvcreateArgs {
  required string logvol = 1;
  required string volgroup = 2;
  required int32 mbytes = 3;
}

message GuestfsSfdiskArgs {
  required string device = 1;
  required int32 cyls = 2;
  required int32 heads = 3;
  required int32 sectors = 4;
  repeated string lines = 5;
}

message GuestfsWriteFileArgs {
  required string path = 1;
  required string content = 2;
  required int32 size = 3;
}

message GuestfsUmountArgs {
  required string pathordevice = 1;
  required bool force = 2;
  required bool lazyunmount = 3;
}

message GuestfsMountsRet {
  repeated string devices = 1;
}

message GuestfsFileArgs {
  required string path = 1;
}

message GuestfsFileRet {
  required string description = 1;
}

message GuestfsCommandArgs {
  repeated string arguments = 1;
}

message GuestfsCommandRet {
  required string output = 1;
}

message GuestfsCommandLinesArgs {
  repeated string arguments = 1;
}

message GuestfsCommandLinesRet {
  repeated string lines = 1;
}

message GuestfsStatvfsArgs {
  required string path = 1;
}

message GuestfsStatvfsRet {
  required GuestfsIntStatVFS statbuf = 1;
}

message GuestfsTune2fsLArgs {
  required string device = 1;
}

message GuestfsTune2fsLRet {
  repeated bytes superblock = 1;
}

message GuestfsBlockdevSetroArgs {
  required string device = 1;
}

message GuestfsBlockdevSetrwArgs {
  required string device = 1;
}

message GuestfsBlockdevGetroArgs {
  required string device = 1;
}

message GuestfsBlockdevGetroRet {
  required bool ro = 1;
}

message GuestfsBlockdevGetssArgs {
  required string device = 1;
}

message GuestfsBlockdevGetssRet {
  required int32 sectorsize = 1;
}

message GuestfsBlockdevGetbszArgs {
  required string device = 1;
}

message GuestfsBlockdevGetbszRet {
  required int32 blocksize = 1;
}

message GuestfsBlockdevSetbszArgs {
  required string device = 1;
  required int32 blocksize = 2;
}

message GuestfsBlockdevGetszArgs {
  required string device = 1;
}

message GuestfsBlockdevGetszRet {
  required int64 sizeinsectors = 1;
}

message GuestfsBlockdevGetsize64Args {
  required string device = 1;
}

message GuestfsBlockdevGetsize64Ret {
  required int64 sizeinbytes = 1;
}

message GuestfsBlockdevFlushbufsArgs {
  required string device = 1;
}

message GuestfsBlockdevRereadptArgs {
  required string device = 1;
}

message GuestfsUploadArgs {
  required string remotefilename = 1;
}

message GuestfsDownloadArgs {
  required string remotefilename = 1;
}

message GuestfsChecksumArgs {
  required string csumtype = 1;
  required string path = 2;
}

message GuestfsChecksumRet {
  required string checksum = 1;
}

message GuestfsTarInArgs {
  required string directory = 1;
  required string compress = 2;
}

message GuestfsTarOutArgs {
  required string directory = 1;
  required string compress = 2;
  required bool numericowner = 3;
  repeated string excludes = 4;
}

message GuestfsTgzInArgs {
  required string directory = 1;
}

message GuestfsTgzOutArgs {
  required string directory = 1;
}

message GuestfsMountRoArgs {
  required string mountable = 1;
  required string mountpoint = 2;
}

message GuestfsMountOptionsArgs {
  required string options = 1;
  required string mountable = 2;
  required string mountpoint = 3;
}

message GuestfsMountVfsArgs {
  required string options = 1;
  required string vfstype = 2;
  required string mountable = 3;
  required string mountpoint = 4;
}

message GuestfsDebugArgs {
  required string subcmd = 1;
  repeated string extraargs = 2;
}

message GuestfsDebugRet {
  required string result = 1;
}

message GuestfsLvremoveArgs {
  required string device = 1;
}

message GuestfsVgremoveArgs {
  required string vgname = 1;
}

message GuestfsPvremoveArgs {
  required string device = 1;
}

message GuestfsSetE2labelArgs {
  required string device = 1;
  required string label = 2;
}

message GuestfsGetE2labelArgs {
  required string device = 1;
}

message GuestfsGetE2labelRet {
  required string label = 1;
}

message GuestfsSetE2uuidArgs {
  required string device = 1;
  required string uuid = 2;
}

message GuestfsGetE2uuidArgs {
  required string device = 1;
}

message GuestfsGetE2uuidRet {
  required string uuid = 1;
}

message GuestfsFsckArgs {
  required string fstype = 1;
  required string device = 2;
}

message GuestfsFsckRet {
  required int32 status = 1;
}

message GuestfsZeroArgs {
  required string device = 1;
}

message GuestfsGrubInstallArgs {
  required string root = 1;
  required string device = 2;
}

message GuestfsCpArgs {
  required string src = 1;
  required string dest = 2;
}

message GuestfsCpAArgs {
  required string src = 1;
  required string dest = 2;
}

message GuestfsMvArgs {
  required string src = 1;
  required string dest = 2;
}

message GuestfsDropCachesArgs {
  required int32 whattodrop = 1;
}

message GuestfsDmesgRet {
  required string kmsgs = 1;
}

message GuestfsEqualArgs {
  required string file1 = 1;
  required string file2 = 2;
}

message GuestfsEqualRet {
  required bool equality = 1;
}

message GuestfsStringsArgs {
  required string path = 1;
}

message GuestfsStringsRet {
  repeated string stringsout = 1;
}

message GuestfsStringsEArgs {
  required string encoding = 1;
  required string path = 2;
}

message GuestfsStringsERet {
  repeated string stringsout = 1;
}

message GuestfsHexdumpArgs {
  required string path = 1;
}

message GuestfsHexdumpRet {
  required string dump = 1;
}

message GuestfsZerofreeArgs {
  required string device = 1;
}

message GuestfsPvresizeArgs {
  required string device = 1;
}

message GuestfsSfdiskNArgs {
  required string device = 1;
  required int32 partnum = 2;
  required int32 cyls = 3;
  required int32 heads = 4;
  required int32 sectors = 5;
  required string line = 6;
}

message GuestfsSfdiskLArgs {
  required string device = 1;
}

message GuestfsSfdiskLRet {
  required string partitions = 1;
}

message GuestfsSfdiskKernelGeometryArgs {
  required string device = 1;
}

message GuestfsSfdiskKernelGeometryRet {
  required string partitions = 1;
}

message GuestfsSfdiskDiskGeometryArgs {
  required string device = 1;
}

message GuestfsSfdiskDiskGeometryRet {
  required string partitions = 1;
}

message GuestfsVgActivateAllArgs {
  required bool activate = 1;
}

message GuestfsVgActivateArgs {
  required bool activate = 1;
  repeated string volgroups = 2;
}

message GuestfsLvresizeArgs {
  required string device = 1;
  required int32 mbytes = 2;
}

message GuestfsResize2fsArgs {
  required string device = 1;
}

message GuestfsE2fsckFArgs {
  required string device = 1;
}

message GuestfsSleepArgs {
  required int32 secs = 1;
}

message GuestfsNtfs3gProbeArgs {
  required bool rw = 1;
  required string device = 2;
}

message GuestfsNtfs3gProbeRet {
  required int32 status = 1;
}

message GuestfsShArgs {
  required string command = 1;
}

message GuestfsShRet {
  required string output = 1;
}

message GuestfsShLinesArgs {
  required string command = 1;
}

message GuestfsShLinesRet {
  repeated string lines = 1;
}

message GuestfsGlobExpandArgs {
  required string pattern = 1;
}

message GuestfsGlobExpandRet {
  repeated string paths = 1;
}

message GuestfsScrubDeviceArgs {
  required string device = 1;
}

message GuestfsScrubFileArgs {
  required string file = 1;
}

message GuestfsScrubFreespaceArgs {
  required string dir = 1;
}

message GuestfsMkdtempArgs {
  required string tmpl = 1;
}

message GuestfsMkdtempRet {
  required string dir = 1;
}

message GuestfsWcLArgs {
  required string path = 1;
}

message GuestfsWcLRet {
  required int32 lines = 1;
}

message GuestfsWcWArgs {
  required string path = 1;
}

message GuestfsWcWRet {
  required int32 words = 1;
}

message GuestfsWcCArgs {
  required string path = 1;
}

message GuestfsWcCRet {
  required int32 chars = 1;
}

message GuestfsHeadArgs {
  required string path = 1;
}

message GuestfsHeadRet {
  repeated string lines = 1;
}

message GuestfsHeadNArgs {
  required int32 nrlines = 1;
  required string path = 2;
}

message GuestfsHeadNRet {
  repeated string lines = 1;
}

message GuestfsTailArgs {
  required string path = 1;
}

message GuestfsTailRet {
  repeated string lines = 1;
}

message GuestfsTailNArgs {
  required int32 nrlines = 1;
  required string path = 2;
}

message GuestfsTailNRet {
  repeated string lines = 1;
}

message GuestfsDfRet {
  required string output = 1;
}

message GuestfsDfHRet {
  required string output = 1;
}

message GuestfsDuArgs {
  required string path = 1;
}

message GuestfsDuRet {
  required int64 sizekb = 1;
}

message GuestfsInitrdListArgs {
  required string path = 1;
}

message GuestfsInitrdListRet {
  repeated string filenames = 1;
}

message GuestfsMountLoopArgs {
  required string file = 1;
  required string mountpoint = 2;
}

message GuestfsMkswapArgs {
  required string device = 1;
  required string label = 2;
  required string uuid = 3;
}

message GuestfsMkswapLArgs {
  required string label = 1;
  required string device = 2;
}

message GuestfsMkswapUArgs {
  required string uuid = 1;
  required string device = 2;
}

message GuestfsMknodArgs {
  required int32 mode = 1;
  required int32 devmajor = 2;
  required int32 devminor = 3;
  required string path = 4;
}

message GuestfsMkfifoArgs {
  required int32 mode = 1;
  required string path = 2;
}

message GuestfsMknodBArgs {
  required int32 mode = 1;
  required int32 devmajor = 2;
  required int32 devminor = 3;
  required string path = 4;
}

message GuestfsMknodCArgs {
  required int32 mode = 1;
  required int32 devmajor = 2;
  required int32 devminor = 3;
  required string path = 4;
}

message GuestfsUmaskArgs {
  required int32 mask = 1;
}

message GuestfsUmaskRet {
  required int32 oldmask = 1;
}

message GuestfsReaddirArgs {
  required string dir = 1;
}

message GuestfsReaddirRet {
  required GuestfsIntDirentList entries = 1;
}

message GuestfsSfdiskMArgs {
  required string device = 1;
  repeated string lines = 2;
}

message GuestfsZfileArgs {
  required string meth = 1;
  required string path = 2;
}

message GuestfsZfileRet {
  required string description = 1;
}

message GuestfsGetxattrsArgs {
  required string path = 1;
}

message GuestfsGetxattrsRet {
  required GuestfsIntXAttrList xattrs = 1;
}

message GuestfsLgetxattrsArgs {
  required string path = 1;
}

message GuestfsLgetxattrsRet {
  required GuestfsIntXAttrList xattrs = 1;
}

message GuestfsSetxattrArgs {
  required string xattr = 1;
  required string val = 2;
  required int32 vallen = 3;
  required string path = 4;
}

message GuestfsLsetxattrArgs {
  required string xattr = 1;
  required string val = 2;
  required int32 vallen = 3;
  required string path = 4;
}

message GuestfsRemovexattrArgs {
  required string xattr = 1;
  required string path = 2;
}

message GuestfsLremovexattrArgs {
  required string xattr = 1;
  required string path = 2;
}

message GuestfsMountpointsRet {
  repeated bytes mps = 1;
}

message GuestfsMkmountpointArgs {
  required string exemptpath = 1;
}

message GuestfsRmmountpointArgs {
  required string exemptpath = 1;
}

message GuestfsGrepArgs {
  required string regex = 1;
  required string path = 2;
  required bool extended = 3;
  required bool fixed = 4;
  required bool insensitive = 5;
  required bool compressed = 6;
}

message GuestfsGrepRet {
  repeated string lines = 1;
}

message GuestfsEgrepArgs {
  required string regex = 1;
  required string path = 2;
}

message GuestfsEgrepRet {
  repeated string lines = 1;
}

message GuestfsFgrepArgs {
  required string pattern = 1;
  required string path = 2;
}

message GuestfsFgrepRet {
  repeated string lines = 1;
}

message GuestfsGrepiArgs {
  required string regex = 1;
  required string path = 2;
}

message GuestfsGrepiRet {
  repeated string lines = 1;
}

message GuestfsEgrepiArgs {
  required string regex = 1;
  required string path = 2;
}

message GuestfsEgrepiRet {
  repeated string lines = 1;
}

message GuestfsFgrepiArgs {
  required string pattern = 1;
  required string path = 2;
}

message GuestfsFgrepiRet {
  repeated string lines = 1;
}

message GuestfsZgrepArgs {
  required string regex = 1;
  required string path = 2;
}

message GuestfsZgrepRet {
  repeated string lines = 1;
}

message GuestfsZegrepArgs {
  required string regex = 1;
  required string path = 2;
}

message GuestfsZegrepRet {
  repeated string lines = 1;
}

message GuestfsZfgrepArgs {
  required string pattern = 1;
  required string path = 2;
}

message GuestfsZfgrepRet {
  repeated string lines = 1;
}

message GuestfsZgrepiArgs {
  required string regex = 1;
  required string path = 2;
}

message GuestfsZgrepiRet {
  repeated string lines = 1;
}

message GuestfsZegrepiArgs {
  required string regex = 1;
  required string path = 2;
}

message GuestfsZegrepiRet {
  repeated string lines = 1;
}

message GuestfsZfgrepiArgs {
  required string pattern = 1;
  required string path = 2;
}

message GuestfsZfgrepiRet {
  repeated string lines = 1;
}

message GuestfsRealpathArgs {
  required string path = 1;
}

message GuestfsRealpathRet {
  required string rpath = 1;
}

message GuestfsLnArgs {
  required string target = 1;
  required string linkname = 2;
}

message GuestfsLnFArgs {
  required string target = 1;
  required string linkname = 2;
}

message GuestfsLnSArgs {
  required string target = 1;
  required string linkname = 2;
}

message GuestfsLnSfArgs {
  required string target = 1;
  required string linkname = 2;
}

message GuestfsReadlinkArgs {
  required string path = 1;
}

message GuestfsReadlinkRet {
  required string link = 1;
}

message GuestfsFallocateArgs {
  required string path = 1;
  required int32 len = 2;
}

message GuestfsSwaponDeviceArgs {
  required string device = 1;
}

message GuestfsSwapoffDeviceArgs {
  required string device = 1;
}

message GuestfsSwaponFileArgs {
  required string file = 1;
}

message GuestfsSwapoffFileArgs {
  required string file = 1;
}

message GuestfsSwaponLabelArgs {
  required string label = 1;
}

message GuestfsSwapoffLabelArgs {
  required string label = 1;
}

message GuestfsSwaponUuidArgs {
  required string uuid = 1;
}

message GuestfsSwapoffUuidArgs {
  required string uuid = 1;
}

message GuestfsMkswapFileArgs {
  required string path = 1;
}

message GuestfsInotifyInitArgs {
  required int32 maxevents = 1;
}

message GuestfsInotifyAddWatchArgs {
  required string path = 1;
  required int32 mask = 2;
}

message GuestfsInotifyAddWatchRet {
  required int64 wd = 1;
}

message GuestfsInotifyRmWatchArgs {
  required int32 wd = 1;
}

message GuestfsInotifyReadRet {
  required GuestfsIntINotifyEventList events = 1;
}

message GuestfsInotifyFilesRet {
  repeated string paths = 1;
}

message GuestfsSetconArgs {
  required string context = 1;
}

message GuestfsGetconRet {
  required string context = 1;
}

message GuestfsMkfsBArgs {
  required string fstype = 1;
  required int32 blocksize = 2;
  required string device = 3;
}

message GuestfsMke2journalArgs {
  required int32 blocksize = 1;
  required string device = 2;
}

message GuestfsMke2journalLArgs {
  required int32 blocksize = 1;
  required string label = 2;
  required string device = 3;
}

message GuestfsMke2journalUArgs {
  required int32 blocksize = 1;
  required string uuid = 2;
  required string device = 3;
}

message GuestfsMke2fsJArgs {
  required string fstype = 1;
  required int32 blocksize = 2;
  required string device = 3;
  required string journal = 4;
}

message GuestfsMke2fsJLArgs {
  required string fstype = 1;
  required int32 blocksize = 2;
  required string device = 3;
  required string label = 4;
}

message GuestfsMke2fsJUArgs {
  required string fstype = 1;
  required int32 blocksize = 2;
  required string device = 3;
  required string uuid = 4;
}

message GuestfsModprobeArgs {
  required string modulename = 1;
}

message GuestfsEchoDaemonArgs {
  repeated string words = 1;
}

message GuestfsEchoDaemonRet {
  required string output = 1;
}

message GuestfsFind0Args {
  required string directory = 1;
}

message GuestfsCaseSensitivePathArgs {
  required string path = 1;
}

message GuestfsCaseSensitivePathRet {
  required string rpath = 1;
}

message GuestfsVfsTypeArgs {
  required string mountable = 1;
}

message GuestfsVfsTypeRet {
  required string fstype = 1;
}

message GuestfsTruncateArgs {
  required string path = 1;
}

message GuestfsTruncateSizeArgs {
  required string path = 1;
  required int64 size = 2;
}

message GuestfsUtimensArgs {
  required string path = 1;
  required int64 atsecs = 2;
  required int64 atnsecs = 3;
  required int64 mtsecs = 4;
  required int64 mtnsecs = 5;
}

message GuestfsMkdirModeArgs {
  required string path = 1;
  required int32 mode = 2;
}

message GuestfsLchownArgs {
  required int32 owner = 1;
  required int32 group = 2;
  required string path = 3;
}

message GuestfsInternalLxattrlistArgs {
  required string path = 1;
  repeated string names = 2;
}

message GuestfsInternalLxattrlistRet {
  required GuestfsIntXAttrList xattrs = 1;
}

message GuestfsInternalReadlinklistArgs {
  required string path = 1;
  repeated string names = 2;
}

message GuestfsInternalReadlinklistRet {
  repeated string links = 1;
}

message GuestfsPreadArgs {
  required string path = 1;
  required int32 count = 2;
  required int64 offset = 3;
}

message GuestfsPreadRet {
  required bytes content = 1;
}

message GuestfsPartInitArgs {
  required string device = 1;
  required string parttype = 2;
}

message GuestfsPartAddArgs {
  required string device = 1;
  required string prlogex = 2;
  required int64 startsect = 3;
  required int64 endsect = 4;
}

message GuestfsPartDiskArgs {
  required string device = 1;
  required string parttype = 2;
}

message GuestfsPartSetBootableArgs {
  required string device = 1;
  required int32 partnum = 2;
  required bool bootable = 3;
}

message GuestfsPartSetNameArgs {
  required string device = 1;
  required int32 partnum = 2;
  required string name = 3;
}

message GuestfsPartListArgs {
  required string device = 1;
}

message GuestfsPartListRet {
  required GuestfsIntPartitionList partitions = 1;
}

message GuestfsPartGetParttypeArgs {
  required string device = 1;
}

message GuestfsPartGetParttypeRet {
  required string parttype = 1;
}

message GuestfsFillArgs {
  required int32 c = 1;
  required int32 len = 2;
  required string path = 3;
}

message GuestfsAvailableArgs {
  repeated string groups = 1;
}

message GuestfsDdArgs {
  required string src = 1;
  required string dest = 2;
}

message GuestfsFilesizeArgs {
  required string file = 1;
}

message GuestfsFilesizeRet {
  required int64 size = 1;
}

message GuestfsLvrenameArgs {
  required string logvol = 1;
  required string newlogvol = 2;
}

message GuestfsVgrenameArgs {
  required string volgroup = 1;
  required string newvolgroup = 2;
}

message GuestfsInitrdCatArgs {
  required string initrdpath = 1;
  required string filename = 2;
}

message GuestfsInitrdCatRet {
  required bytes content = 1;
}

message GuestfsPvuuidArgs {
  required string device = 1;
}

message GuestfsPvuuidRet {
  required string uuid = 1;
}

message GuestfsVguuidArgs {
  required string vgname = 1;
}

message GuestfsVguuidRet {
  required string uuid = 1;
}

message GuestfsLvuuidArgs {
  required string device = 1;
}

message GuestfsLvuuidRet {
  required string uuid = 1;
}

message GuestfsVgpvuuidsArgs {
  required string vgname = 1;
}

message GuestfsVgpvuuidsRet {
  repeated string uuids = 1;
}

message GuestfsVglvuuidsArgs {
  required string vgname = 1;
}

message GuestfsVglvuuidsRet {
  repeated string uuids = 1;
}

message GuestfsCopySizeArgs {
  required string src = 1;
  required string dest = 2;
  required int64 size = 3;
}

message GuestfsZeroDeviceArgs {
  required string device = 1;
}

message GuestfsTxzInArgs {
  required string directory = 1;
}

message GuestfsTxzOutArgs {
  required string directory = 1;
}

message GuestfsPartDelArgs {
  required string device = 1;
  required int32 partnum = 2;
}

message GuestfsPartGetBootableArgs {
  required string device = 1;
  required int32 partnum = 2;
}

message GuestfsPartGetBootableRet {
  required bool bootable = 1;
}

message GuestfsPartGetMbrIdArgs {
  required string device = 1;
  required int32 partnum = 2;
}

message GuestfsPartGetMbrIdRet {
  required int32 idbyte = 1;
}

message GuestfsPartSetMbrIdArgs {
  required string device = 1;
  required int32 partnum = 2;
  required int32 idbyte = 3;
}

message GuestfsChecksumDeviceArgs {
  required string csumtype = 1;
  required string device = 2;
}

message GuestfsChecksumDeviceRet {
  required string checksum = 1;
}

message GuestfsLvresizeFreeArgs {
  required string lv = 1;
  required int32 percent = 2;
}

message GuestfsAugClearArgs {
  required string augpath = 1;
}

message GuestfsGetUmaskRet {
  required int32 mask = 1;
}

message GuestfsDebugUploadArgs {
  required string tmpname = 1;
  required int32 mode = 2;
}

message GuestfsBase64InArgs {
  required string filename = 1;
}

message GuestfsBase64OutArgs {
  required string filename = 1;
}

message GuestfsChecksumsOutArgs {
  required string csumtype = 1;
  required string directory = 2;
}

message GuestfsFillPatternArgs {
  required string pattern = 1;
  required int32 len = 2;
  required string path = 3;
}

message GuestfsInternalWriteArgs {
  required string path = 1;
  required bytes content = 2;
}

message GuestfsPwriteArgs {
  required string path = 1;
  required bytes content = 2;
  required int64 offset = 3;
}

message GuestfsPwriteRet {
  required int32 nbytes = 1;
}

message GuestfsResize2fsSizeArgs {
  required string device = 1;
  required int64 size = 2;
}

message GuestfsPvresizeSizeArgs {
  required string device = 1;
  required int64 size = 2;
}

message GuestfsNtfsresizeSizeArgs {
  required string device = 1;
  required int64 size = 2;
}

message GuestfsAvailableAllGroupsRet {
  repeated string groups = 1;
}

message GuestfsFallocate64Args {
  required string path = 1;
  required int64 len = 2;
}

message GuestfsVfsLabelArgs {
  required string mountable = 1;
}

message GuestfsVfsLabelRet {
  required string label = 1;
}

message GuestfsVfsUuidArgs {
  required string mountable = 1;
}

message GuestfsVfsUuidRet {
  required string uuid = 1;
}

message GuestfsLvmSetFilterArgs {
  repeated string devices = 1;
}

message GuestfsLuksOpenArgs {
  required string device = 1;
  required string key = 2;
  required string mapname = 3;
}

message GuestfsLuksOpenRoArgs {
  required string device = 1;
  required string key = 2;
  required string mapname = 3;
}

message GuestfsLuksCloseArgs {
  required string device = 1;
}

message GuestfsLuksFormatArgs {
  required string device = 1;
  required string key = 2;
  required int32 keyslot = 3;
}

message GuestfsLuksFormatCipherArgs {
  required string device = 1;
  required string key = 2;
  required int32 keyslot = 3;
  required string cipher = 4;
}

message GuestfsLuksAddKeyArgs {
  required string device = 1;
  required string key = 2;
  required string newkey = 3;
  required int32 keyslot = 4;
}

message GuestfsLuksKillSlotArgs {
  required string device = 1;
  required string key = 2;
  required int32 keyslot = 3;
}

message GuestfsIsLvArgs {
  required string device = 1;
}

message GuestfsIsLvRet {
  required bool lvflag = 1;
}

message GuestfsFindfsUuidArgs {
  required string uuid = 1;
}

message GuestfsFindfsUuidRet {
  required string device = 1;
}

message GuestfsFindfsLabelArgs {
  required string label = 1;
}

message GuestfsFindfsLabelRet {
  required string device = 1;
}

message GuestfsIsChardevArgs {
  required string path = 1;
  required bool followsymlinks = 2;
}

message GuestfsIsChardevRet {
  required bool flag = 1;
}

message GuestfsIsBlockdevArgs {
  required string path = 1;
  required bool followsymlinks = 2;
}

message GuestfsIsBlockdevRet {
  required bool flag = 1;
}

message GuestfsIsFifoArgs {
  required string path = 1;
  required bool followsymlinks = 2;
}

message GuestfsIsFifoRet {
  required bool flag = 1;
}

message GuestfsIsSymlinkArgs {
  required string path = 1;
}

message GuestfsIsSymlinkRet {
  required bool flag = 1;
}

message GuestfsIsSocketArgs {
  required string path = 1;
  required bool followsymlinks = 2;
}

message GuestfsIsSocketRet {
  required bool flag = 1;
}

message GuestfsPartToDevArgs {
  required string partition = 1;
}

message GuestfsPartToDevRet {
  required string device = 1;
}

message GuestfsUploadOffsetArgs {
  required string remotefilename = 1;
  required int64 offset = 2;
}

message GuestfsDownloadOffsetArgs {
  required string remotefilename = 1;
  required int64 offset = 2;
  required int64 size = 3;
}

message GuestfsPwriteDeviceArgs {
  required string device = 1;
  required bytes content = 2;
  required int64 offset = 3;
}

message GuestfsPwriteDeviceRet {
  required int32 nbytes = 1;
}

message GuestfsPreadDeviceArgs {
  required string device = 1;
  required int32 count = 2;
  required int64 offset = 3;
}

message GuestfsPreadDeviceRet {
  required bytes content = 1;
}

message GuestfsLvmCanonicalLvNameArgs {
  required string lvname = 1;
}

message GuestfsLvmCanonicalLvNameRet {
  required string lv = 1;
}

message GuestfsMkfsArgs {
  required string fstype = 1;
  required string device = 2;
  required int32 blocksize = 3;
  required string features = 4;
  required int32 inode = 5;
  required int32 sectorsize = 6;
}

message GuestfsGetxattrArgs {
  required string path = 1;
  required string name = 2;
}

message GuestfsGetxattrRet {
  required bytes xattr = 1;
}

message GuestfsLgetxattrArgs {
  required string path = 1;
  required string name = 2;
}

message GuestfsLgetxattrRet {
  required bytes xattr = 1;
}

message GuestfsResize2fsMArgs {
  required string device = 1;
}

message GuestfsIsZeroArgs {
  required string path = 1;
}

message GuestfsIsZeroRet {
  required bool zeroflag = 1;
}

message GuestfsIsZeroDeviceArgs {
  required string device = 1;
}

message GuestfsIsZeroDeviceRet {
  required bool zeroflag = 1;
}

message GuestfsList9pRet {
  repeated string mounttags = 1;
}

message GuestfsMount9PArgs {
  required string mounttag = 1;
  required string mountpoint = 2;
  required string options = 3;
}

message GuestfsListDmDevicesRet {
  repeated string devices = 1;
}

message GuestfsNTFSResizeOptsArgs {
  required string device = 1;
  required int64 size = 2;
  required bool force = 3;
}

message GuestfsBTRFSFilesystemResizeArgs {
  required string mountpoint = 1;
  required int64 size = 2;
}

message GuestfsInternalWriteAppendArgs {
  required string path = 1;
  required bytes content = 2;
}

message GuestfsCompressOutArgs {
  required string ctype = 1;
  required string file = 2;
  required int32 level = 3;
}

message GuestfsCompressDeviceOutArgs {
  required string ctype = 1;
  required string device = 2;
  required int32 level = 3;
}

message GuestfsPartToPartnumArgs {
  required string partition = 1;
}

message GuestfsPartToPartnumRet {
  required int32 partnum = 1;
}

message GuestfsCopyDeviceToDeviceArgs {
  required string src = 1;
  required string dest = 2;
  required int64 srcoffset = 3;
  required int64 destoffset = 4;
  required int64 size = 5;
  required bool sparse = 6;
}

message GuestfsCopyDeviceToFileArgs {
  required string src = 1;
  required string dest = 2;
  required int64 srcoffset = 3;
  required int64 destoffset = 4;
  required int64 size = 5;
  required bool sparse = 6;
}

message GuestfsCopyFileToDeviceArgs {
  required string src = 1;
  required string dest = 2;
  required int64 srcoffset = 3;
  required int64 destoffset = 4;
  required int64 size = 5;
  required bool sparse = 6;
}

message GuestfsCopyFileToFileArgs {
  required string src = 1;
  required string dest = 2;
  required int64 srcoffset = 3;
  required int64 destoffset = 4;
  required int64 size = 5;
  required bool sparse = 6;
}

message GuestfsTune2FSArgs {
  required string device = 1;
  required bool force = 2;
  required int32 maxmountcount = 3;
  required int32 mountcount = 4;
  required string errorbehavior = 5;
  required int64 group = 6;
  required int32 intervalbetweenchecks = 7;
  required int32 reservedblockspercentage = 8;
  required string lastmounteddirectory = 9;
  required int64 reservedblockscount = 10;
  required int64 user = 11;
}

message GuestfsMDCreateArgs {
  required string name = 1;
  repeated string devices = 2;
  required int64 missingbitmap = 3;
  required int32 nrdevices = 4;
  required int32 spare = 5;
  required int64 chunk = 6;
  required string level = 7;
}

message GuestfsListMdDevicesRet {
  repeated string devices = 1;
}

message GuestfsMdDetailArgs {
  required string md = 1;
}

message GuestfsMdDetailRet {
  repeated bytes info = 1;
}

message GuestfsMdStopArgs {
  required string md = 1;
}

message GuestfsBlkidArgs {
  required string device = 1;
}

message GuestfsBlkidRet {
  repeated bytes info = 1;
}

message GuestfsE2fsckArgs {
  required string device = 1;
  required bool correct = 2;
  required bool forceall = 3;
}

message GuestfsLlzArgs {
  required string directory = 1;
}

message GuestfsLlzRet {
  required string listing = 1;
}

message GuestfsWipefsArgs {
  required string device = 1;
}

message GuestfsNtfsfixArgs {
  required string device = 1;
  required bool clearbadsectors = 2;
}

message GuestfsNtfscloneOutArgs {
  required string device = 1;
  required bool metadataonly = 2;
  required bool rescue = 3;
  required bool ignorefscheck = 4;
  required bool preservetimestamps = 5;
  required bool force = 6;
}

message GuestfsNtfscloneInArgs {
  required string device = 1;
}

message GuestfsSetLabelArgs {
  required string mountable = 1;
  required string label = 2;
}

message GuestfsZeroFreeSpaceArgs {
  required string directory = 1;
}

message GuestfsLvcreateFreeArgs {
  required string logvol = 1;
  required string volgroup = 2;
  required int32 percent = 3;
}

message GuestfsIsoinfoDeviceArgs {
  required string device = 1;
}

message GuestfsIsoinfoDeviceRet {
  required GuestfsIntISOInfo isodata = 1;
}

message GuestfsIsoinfoArgs {
  required string isofile = 1;
}

message GuestfsIsoinfoRet {
  required GuestfsIntISOInfo isodata = 1;
}

message GuestfsVgmetaArgs {
  required string vgname = 1;
}

message GuestfsVgmetaRet {
  required bytes metadata = 1;
}

message GuestfsMdStatArgs {
  required string md = 1;
}

message GuestfsMdStatRet {
  required GuestfsIntMDStatList devices = 1;
}

message GuestfsMkfsBtrfsArgs {
  repeated string devices = 1;
  required int64 allocstart = 2;
  required int64 bytecount = 3;
  required string datatype = 4;
  required int32 leafsize = 5;
  required string label = 6;
  required string metadata = 7;
  required int32 nodesize = 8;
  required int32 sectorsize = 9;
}

message GuestfsGetE2attrsArgs {
  required string file = 1;
}

message GuestfsGetE2attrsRet {
  required string attrs = 1;
}

message GuestfsSetE2attrsArgs {
  required string file = 1;
  required string attrs = 2;
  required bool clear = 3;
}

message GuestfsGetE2generationArgs {
  required string file = 1;
}

message GuestfsGetE2generationRet {
  required int64 generation = 1;
}

message GuestfsSetE2generationArgs {
  required string file = 1;
  required int64 generation = 2;
}

message GuestfsBTRFSSubvolumeSnapshotArgs {
  required string source = 1;
  required string dest = 2;
}

message GuestfsBTRFSSubvolumeDeleteArgs {
  required string subvolume = 1;
}

message GuestfsBTRFSSubvolumeCreateArgs {
  required string dest = 1;
}

message GuestfsBTRFSSubvolumeListArgs {
  required string fs = 1;
}

message GuestfsBTRFSSubvolumeListRet {
  required GuestfsIntBTRFSSubvolumeList subvolumes = 1;
}

message GuestfsBTRFSSubvolumeSetDefaultArgs {
  required int64 id = 1;
  required string fs = 2;
}

message GuestfsBTRFSFilesystemSyncArgs {
  required string fs = 1;
}

message GuestfsBTRFSFilesystemBalanceArgs {
  required string fs = 1;
}

message GuestfsBTRFSDeviceAddArgs {
  repeated string devices = 1;
  required string fs = 2;
}

message GuestfsBTRFSDeviceDeleteArgs {
  repeated string devices = 1;
  required string fs = 2;
}

message GuestfsBtrfsSetSeedingArgs {
  required string device = 1;
  required bool seeding = 2;
}

message GuestfsBtrfsFsckArgs {
  required string device = 1;
  required int64 superblock = 2;
  required bool repair = 3;
}

message GuestfsFilesystemAvailableArgs {
  required string filesystem = 1;
}

message GuestfsFilesystemAvailableRet {
  required bool fsavail = 1;
}

message GuestfsFstrimArgs {
  required string mountpoint = 1;
  required int64 offset = 2;
  required int64 length = 3;
  required int64 minimumfreeextent = 4;
}

message GuestfsDeviceIndexArgs {
  required string device = 1;
}

message GuestfsDeviceIndexRet {
  required int32 index = 1;
}

message GuestfsNrDevicesRet {
  required int32 nrdisks = 1;
}

message GuestfsXfsInfoArgs {
  required string pathordevice = 1;
}

message GuestfsXfsInfoRet {
  required GuestfsIntXFSInfo info = 1;
}

message GuestfsPvchangeUuidArgs {
  required string device = 1;
}

message GuestfsVgchangeUuidArgs {
  required string vg = 1;
}

message GuestfsUtsnameRet {
  required GuestfsIntUTSName uts = 1;
}

message GuestfsXfsGrowfsArgs {
  required string path = 1;
  required bool datasec = 2;
  required bool logsec = 3;
  required bool rtsec = 4;
  required int64 datasize = 5;
  required int64 logsize = 6;
  required int64 rtsize = 7;
  required int64 rtextsize = 8;
  required int32 maxpct = 9;
}

message GuestfsRsyncArgs {
  required string src = 1;
  required string dest = 2;
  required bool archive = 3;
  required bool deletedest = 4;
}

message GuestfsRsyncInArgs {
  required string remote = 1;
  required string dest = 2;
  required bool archive = 3;
  required bool deletedest = 4;
}

message GuestfsRsyncOutArgs {
  required string src = 1;
  required string remote = 2;
  required bool archive = 3;
  required bool deletedest = 4;
}

message GuestfsLs0Args {
  required string dir = 1;
}

message GuestfsFillDirArgs {
  required string dir = 1;
  required int32 nr = 2;
}

message GuestfsXfsAdminArgs {
  required string device = 1;
  required bool extunwritten = 2;
  required bool imgfile = 3;
  required bool v2log = 4;
  required bool projid32bit = 5;
  required bool lazycounter = 6;
  required string label = 7;
  required string uuid = 8;
}

message GuestfsHivexOpenArgs {
  required string filename = 1;
  required bool verbose = 2;
  required bool debug = 3;
  required bool write = 4;
}

message GuestfsHivexRootRet {
  required int64 nodeh = 1;
}

message GuestfsHivexNodeNameArgs {
  required int64 nodeh = 1;
}

message GuestfsHivexNodeNameRet {
  required string name = 1;
}

message GuestfsHivexNodeChildrenArgs {
  required int64 nodeh = 1;
}

message GuestfsHivexNodeChildrenRet {
  required GuestfsIntHivexNodeList nodehs = 1;
}

message GuestfsHivexNodeGetChildArgs {
  required int64 nodeh = 1;
  required string name = 2;
}

message GuestfsHivexNodeGetChildRet {
  required int64 child = 1;
}

message GuestfsHivexNodeParentArgs {
  required int64 nodeh = 1;
}

message GuestfsHivexNodeParentRet {
  required int64 parent = 1;
}

message GuestfsHivexNodeValuesArgs {
  required int64 nodeh = 1;
}

message GuestfsHivexNodeValuesRet {
  required GuestfsIntHivexValueList valuehs = 1;
}

message GuestfsHivexNodeGetValueArgs {
  required int64 nodeh = 1;
  required string key = 2;
}

message GuestfsHivexNodeGetValueRet {
  required int64 valueh = 1;
}

message GuestfsHivexValueKeyArgs {
  required int64 valueh = 1;
}

message GuestfsHivexValueKeyRet {
  required string key = 1;
}

message GuestfsHivexValueTypeArgs {
  required int64 valueh = 1;
}

message GuestfsHivexValueTypeRet {
  required int64 datatype = 1;
}

message GuestfsHivexValueValueArgs {
  required int64 valueh = 1;
}

message GuestfsHivexValueValueRet {
  required bytes databuf = 1;
}

message GuestfsHivexCommitArgs {
  repeated string filename = 1;
}

message GuestfsHivexNodeAddChildArgs {
  required int64 parent = 1;
  required string name = 2;
}

message GuestfsHivexNodeAddChildRet {
  required int64 nodeh = 1;
}

message GuestfsHivexNodeDeleteChildArgs {
  required int64 nodeh = 1;
}

message GuestfsHivexNodeSetValueArgs {
  required int64 nodeh = 1;
  required string key = 2;
  required int64 t = 3;
  required bytes val = 4;
}

message GuestfsXfsRepairArgs {
  required string device = 1;
  required bool forcelogzero = 2;
  required bool nomodify = 3;
  required bool noprefetch = 4;
  required bool forcegeometry = 5;
  required int64 maxmem = 6;
  required int64 ihashsize = 7;
  required int64 bhashsize = 8;
  required int64 agstride = 9;
  required string logdev = 10;
  required string rtdev = 11;
}

message GuestfsXfsRepairRet {
  required int32 status = 1;
}

message GuestfsRmFArgs {
  required string path = 1;
}

message GuestfsMke2fsArgs {
  required string device = 1;
  required int64 blockscount = 2;
  required int64 blocksize = 3;
  required int64 fragsize = 4;
  required int64 blockspergroup = 5;
  required int64 numberofgroups = 6;
  required int64 bytesperinode = 7;
  required int64 inodesize = 8;
  required int64 journalsize = 9;
  required int64 numberofinodes = 10;
  required int64 stridesize = 11;
  required int64 stripewidth = 12;
  required int64 maxonlineresize = 13;
  required int32 reservedblockspercentage = 14;
  required int32 mmpupdateinterval = 15;
  required string journaldevice = 16;
  required string label = 17;
  required string lastmounteddir = 18;
  required string creatoros = 19;
  required string fstype = 20;
  required string usagetype = 21;
  required string uuid = 22;
  required bool forcecreate = 23;
  required bool writesbandgrouponly = 24;
  required bool lazyitableinit = 25;
  required bool lazyjournalinit = 26;
  required bool testfs = 27;
  required bool discard = 28;
  required bool quotatype = 29;
  required bool extent = 30;
  required bool filetype = 31;
  required bool flexbg = 32;
  required bool hasjournal = 33;
  required bool journaldev = 34;
  required bool largefile = 35;
  required bool quota = 36;
  required bool resizeinode = 37;
  required bool sparsesuper = 38;
  required bool uninitbg = 39;
}

message GuestfsListDiskLabelsRet {
  repeated bytes labels = 1;
}

message GuestfsInternalHotAddDriveArgs {
  required string label = 1;
}

message GuestfsInternalHotRemoveDrivePrecheckArgs {
  required string label = 1;
}

message GuestfsInternalHotRemoveDriveArgs {
  required string label = 1;
}

message GuestfsMktempArgs {
  required string tmpl = 1;
  required string suffix = 2;
}

message GuestfsMktempRet {
  required string path = 1;
}

message GuestfsMklostAndFoundArgs {
  required string mountpoint = 1;
}

message GuestfsAclGetFileArgs {
  required string path = 1;
  required string acltype = 2;
}

message GuestfsAclGetFileRet {
  required string acl = 1;
}

message GuestfsAclSetFileArgs {
  required string path = 1;
  required string acltype = 2;
  required string acl = 3;
}

message GuestfsAclDeleteDefFileArgs {
  required string dir = 1;
}

message GuestfsCapGetFileArgs {
  required string path = 1;
}

message GuestfsCapGetFileRet {
  required string cap = 1;
}

message GuestfsCapSetFileArgs {
  required string path = 1;
  required string cap = 2;
}

message GuestfsListLdmVolumesRet {
  repeated string devices = 1;
}

message GuestfsListLdmPartitionsRet {
  repeated string devices = 1;
}

message GuestfsLdmtoolScanRet {
  repeated string guids = 1;
}

message GuestfsLdmtoolScanDevicesArgs {
  repeated string devices = 1;
}

message GuestfsLdmtoolScanDevicesRet {
  repeated string guids = 1;
}

message GuestfsLdmtoolDiskgroupNameArgs {
  required string diskgroup = 1;
}

message GuestfsLdmtoolDiskgroupNameRet {
  required string name = 1;
}

message GuestfsLdmtoolDiskgroupVolumesArgs {
  required string diskgroup = 1;
}

message GuestfsLdmtoolDiskgroupVolumesRet {
  repeated string volumes = 1;
}

message GuestfsLdmtoolDiskgroupDisksArgs {
  required string diskgroup = 1;
}

message GuestfsLdmtoolDiskgroupDisksRet {
  repeated string disks = 1;
}

message GuestfsLdmtoolVolumeTypeArgs {
  required string diskgroup = 1;
  required string volume = 2;
}

message GuestfsLdmtoolVolumeTypeRet {
  required string voltype = 1;
}

message GuestfsLdmtoolVolumeHintArgs {
  required string diskgroup = 1;
  required string volume = 2;
}

message GuestfsLdmtoolVolumeHintRet {
  required string hint = 1;
}

message GuestfsLdmtoolVolumePartitionsArgs {
  required string diskgroup = 1;
  required string volume = 2;
}

message GuestfsLdmtoolVolumePartitionsRet {
  repeated string partitions = 1;
}

message GuestfsPartSetGptTypeArgs {
  required string device = 1;
  required int32 partnum = 2;
  required string guid = 3;
}

message GuestfsPartGetGptTypeArgs {
  required string device = 1;
  required int32 partnum = 2;
}

message GuestfsPartGetGptTypeRet {
  required string guid = 1;
}

message GuestfsRenameArgs {
  required string oldpath = 1;
  required string newpath = 2;
}

message GuestfsIsWholeDeviceArgs {
  required string device = 1;
}

message GuestfsIsWholeDeviceRet {
  required bool flag = 1;
}

message GuestfsInternalParseMountableArgs {
  required string mountable = 1;
}

message GuestfsInternalParseMountableRet {
  required GuestfsIntInternalMountable mountable = 1;
}

message GuestfsInternalRhbz914931Args {
  required int32 count = 1;
}

message GuestfsFeatureAvailableArgs {
  repeated string groups = 1;
}

message GuestfsFeatureAvailableRet {
  required bool isavailable = 1;
}

message GuestfsSyslinuxArgs {
  required string device = 1;
  required string directory = 2;
}

message GuestfsExtlinuxArgs {
  required string directory = 1;
}

message GuestfsCpRArgs {
  required string src = 1;
  required string dest = 2;
}

message GuestfsRemountArgs {
  required string mountpoint = 1;
  required bool rw = 2;
}

message GuestfsSetUuidArgs {
  required string device = 1;
  required string uuid = 2;
}

message GuestfsJournalOpenArgs {
  required string directory = 1;
}

message GuestfsJournalNextRet {
  required bool more = 1;
}

message GuestfsJournalSkipArgs {
  required int64 skip = 1;
}

message GuestfsJournalSkipRet {
  required int64 rskip = 1;
}

message GuestfsJournalGetDataThresholdRet {
  required int64 threshold = 1;
}

message GuestfsJournalSetDataThresholdArgs {
  required int64 threshold = 1;
}

message GuestfsAugSetmArgs {
  required string base = 1;
  repeated string sub = 2;
  required string val = 3;
}

message GuestfsAugSetmRet {
  required int32 nodes = 1;
}

message GuestfsAugLabelArgs {
  required string augpath = 1;
}

message GuestfsAugLabelRet {
  required string label = 1;
}

message GuestfsInternalUploadArgs {
  required string tmpname = 1;
  required int32 mode = 2;
}

message GuestfsCopyAttributesArgs {
  required string src = 1;
  required string dest = 2;
  required bool all = 3;
  required bool mode = 4;
  required bool xattributes = 5;
  required bool ownership = 6;
}

message GuestfsPartGetNameArgs {
  required string device = 1;
  required int32 partnum = 2;
}

message GuestfsPartGetNameRet {
  required string name = 1;
}

message GuestfsBlkdiscardArgs {
  required string device = 1;
}

message GuestfsBlkdiscardzeroesArgs {
  required string device = 1;
}

message GuestfsBlkdiscardzeroesRet {
  required bool zeroes = 1;
}

message GuestfsCpioOutArgs {
  required string directory = 1;
  required string format = 2;
}

message GuestfsJournalGetRealtimeUsecRet {
  required int64 usec = 1;
}

message GuestfsStatnsArgs {
  required string path = 1;
}

message GuestfsStatnsRet {
  required GuestfsIntStatNS statbuf = 1;
}

message GuestfsLstatnsArgs {
  required string path = 1;
}

message GuestfsLstatnsRet {
  required GuestfsIntStatNS statbuf = 1;
}

message GuestfsInternalLstatnslistArgs {
  required string path = 1;
  repeated string names = 2;
}

message GuestfsInternalLstatnslistRet {
  required GuestfsIntStatNSList statbufs = 1;
}

/* Table of procedure numbers. */
enum GuestfsProcedure {
  GUESTFS_PROC_MOUNT = 1;
  GUESTFS_PROC_SYNC = 2;
  GUESTFS_PROC_TOUCH = 3;
  GUESTFS_PROC_LL = 5;
  GUESTFS_PROC_LIST_DEVICES = 7;
  GUESTFS_PROC_LIST_PARTITIONS = 8;
  GUESTFS_PROC_PVS = 9;
  GUESTFS_PROC_VGS = 10;
  GUESTFS_PROC_LVS = 11;
  GUESTFS_PROC_PVS_FULL = 12;
  GUESTFS_PROC_VGS_FULL = 13;
  GUESTFS_PROC_LVS_FULL = 14;
  GUESTFS_PROC_AUG_INIT = 16;
  GUESTFS_PROC_AUG_CLOSE = 26;
  GUESTFS_PROC_AUG_DEFVAR = 17;
  GUESTFS_PROC_AUG_DEFNODE = 18;
  GUESTFS_PROC_AUG_GET = 19;
  GUESTFS_PROC_AUG_SET = 20;
  GUESTFS_PROC_AUG_INSERT = 21;
  GUESTFS_PROC_AUG_RM = 22;
  GUESTFS_PROC_AUG_MV = 23;
  GUESTFS_PROC_AUG_MATCH = 24;
  GUESTFS_PROC_AUG_SAVE = 25;
  GUESTFS_PROC_AUG_LOAD = 27;
  GUESTFS_PROC_AUG_LS = 28;
  GUESTFS_PROC_RM = 29;
  GUESTFS_PROC_RMDIR = 30;
  GUESTFS_PROC_RM_RF = 31;
  GUESTFS_PROC_MKDIR = 32;
  GUESTFS_PROC_MKDIR_P = 33;
  GUESTFS_PROC_CHMOD = 34;
  GUESTFS_PROC_CHOWN = 35;
  GUESTFS_PROC_EXISTS = 36;
  GUESTFS_PROC_IS_FILE = 37;
  GUESTFS_PROC_IS_DIR = 38;
  GUESTFS_PROC_PVCREATE = 39;
  GUESTFS_PROC_VGCREATE = 40;
  GUESTFS_PROC_LVCREATE = 41;
  GUESTFS_PROC_SFDISK = 43;
  GUESTFS_PROC_WRITE_FILE = 44;
  GUESTFS_PROC_UMOUNT = 45;
  GUESTFS_PROC_MOUNTS = 46;
  GUESTFS_PROC_UMOUNT_ALL = 47;
  GUESTFS_PROC_LVM_REMOVE_ALL = 48;
  GUESTFS_PROC_FILE = 49;
  GUESTFS_PROC_COMMAND = 50;
  GUESTFS_PROC_COMMAND_LINES = 51;
  GUESTFS_PROC_STATVFS = 54;
  GUESTFS_PROC_TUNE2FS_L = 55;
  GUESTFS_PROC_BLOCKDEV_SETRO = 56;
  GUESTFS_PROC_BLOCKDEV_SETRW = 57;
  GUESTFS_PROC_BLOCKDEV_GETRO = 58;
  GUESTFS_PROC_BLOCKDEV_GETSS = 59;
  GUESTFS_PROC_BLOCKDEV_GETBSZ = 60;
  GUESTFS_PROC_BLOCKDEV_SETBSZ = 61;
  GUESTFS_PROC_BLOCKDEV_GETSZ = 62;
  GUESTFS_PROC_BLOCKDEV_GETSIZE64 = 63;
  GUESTFS_PROC_BLOCKDEV_FLUSHBUFS = 64;
  GUESTFS_PROC_BLOCKDEV_REREADPT = 65;
  GUESTFS_PROC_UPLOAD = 66;
  GUESTFS_PROC_DOWNLOAD = 67;
  GUESTFS_PROC_CHECKSUM = 68;
  GUESTFS_PROC_TAR_IN = 69;
  GUESTFS_PROC_TAR_OUT = 70;
  GUESTFS_PROC_TGZ_IN = 71;
  GUESTFS_PROC_TGZ_OUT = 72;
  GUESTFS_PROC_MOUNT_RO = 73;
  GUESTFS_PROC_MOUNT_OPTIONS = 74;
  GUESTFS_PROC_MOUNT_VFS = 75;
  GUESTFS_PROC_DEBUG = 76;
  GUESTFS_PROC_LVREMOVE = 77;
  GUESTFS_PROC_VGREMOVE = 78;
  GUESTFS_PROC_PVREMOVE = 79;
  GUESTFS_PROC_SET_E2LABEL = 80;
  GUESTFS_PROC_GET_E2LABEL = 81;
  GUESTFS_PROC_SET_E2UUID = 82;
  GUESTFS_PROC_GET_E2UUID = 83;
  GUESTFS_PROC_FSCK = 84;
  GUESTFS_PROC_ZERO = 85;
  GUESTFS_PROC_GRUB_INSTALL = 86;
  GUESTFS_PROC_CP = 87;
  GUESTFS_PROC_CP_A = 88;
  GUESTFS_PROC_MV = 89;
  GUESTFS_PROC_DROP_CACHES = 90;
  GUESTFS_PROC_DMESG = 91;
  GUESTFS_PROC_PING_DAEMON = 92;
  GUESTFS_PROC_EQUAL = 93;
  GUESTFS_PROC_STRINGS = 94;
  GUESTFS_PROC_STRINGS_E = 95;
  GUESTFS_PROC_HEXDUMP = 96;
  GUESTFS_PROC_ZEROFREE = 97;
  GUESTFS_PROC_PVRESIZE = 98;
  GUESTFS_PROC_SFDISK_N = 99;
  GUESTFS_PROC_SFDISK_L = 100;
  GUESTFS_PROC_SFDISK_KERNEL_GEOMETRY = 101;
  GUESTFS_PROC_SFDISK_DISK_GEOMETRY = 102;
  GUESTFS_PROC_VG_ACTIVATE_ALL = 103;
  GUESTFS_PROC_VG_ACTIVATE = 104;
  GUESTFS_PROC_LVRESIZE = 105;
  GUESTFS_PROC_RESIZE2FS = 106;
  GUESTFS_PROC_E2FSCK_F = 108;
  GUESTFS_PROC_SLEEP = 109;
  GUESTFS_PROC_NTFS_3G_PROBE = 110;
  GUESTFS_PROC_SH = 111;
  GUESTFS_PROC_SH_LINES = 112;
  GUESTFS_PROC_GLOB_EXPAND = 113;
  GUESTFS_PROC_SCRUB_DEVICE = 114;
  GUESTFS_PROC_SCRUB_FILE = 115;
  GUESTFS_PROC_SCRUB_FREESPACE = 116;
  GUESTFS_PROC_MKDTEMP = 117;
  GUESTFS_PROC_WC_L = 118;
  GUESTFS_PROC_WC_W = 119;
  GUESTFS_PROC_WC_C = 120;
  GUESTFS_PROC_HEAD = 121;
  GUESTFS_PROC_HEAD_N = 122;
  GUESTFS_PROC_TAIL = 123;
  GUESTFS_PROC_TAIL_N = 124;
  GUESTFS_PROC_DF = 125;
  GUESTFS_PROC_DF_H = 126;
  GUESTFS_PROC_DU = 127;
  GUESTFS_PROC_INITRD_LIST = 128;
  GUESTFS_PROC_MOUNT_LOOP = 129;
  GUESTFS_PROC_MKSWAP = 130;
  GUESTFS_PROC_MKSWAP_L = 131;
  GUESTFS_PROC_MKSWAP_U = 132;
  GUESTFS_PROC_MKNOD = 133;
  GUESTFS_PROC_MKFIFO = 134;
  GUESTFS_PROC_MKNOD_B = 135;
  GUESTFS_PROC_MKNOD_C = 136;
  GUESTFS_PROC_UMASK = 137;
  GUESTFS_PROC_READDIR = 138;
  GUESTFS_PROC_SFDISKM = 139;
  GUESTFS_PROC_ZFILE = 140;
  GUESTFS_PROC_GETXATTRS = 141;
  GUESTFS_PROC_LGETXATTRS = 142;
  GUESTFS_PROC_SETXATTR = 143;
  GUESTFS_PROC_LSETXATTR = 144;
  GUESTFS_PROC_REMOVEXATTR = 145;
  GUESTFS_PROC_LREMOVEXATTR = 146;
  GUESTFS_PROC_MOUNTPOINTS = 147;
  GUESTFS_PROC_MKMOUNTPOINT = 148;
  GUESTFS_PROC_RMMOUNTPOINT = 149;
  GUESTFS_PROC_GREP = 151;
  GUESTFS_PROC_EGREP = 152;
  GUESTFS_PROC_FGREP = 153;
  GUESTFS_PROC_GREPI = 154;
  GUESTFS_PROC_EGREPI = 155;
  GUESTFS_PROC_FGREPI = 156;
  GUESTFS_PROC_ZGREP = 157;
  GUESTFS_PROC_ZEGREP = 158;
  GUESTFS_PROC_ZFGREP = 159;
  GUESTFS_PROC_ZGREPI = 160;
  GUESTFS_PROC_ZEGREPI = 161;
  GUESTFS_PROC_ZFGREPI = 162;
  GUESTFS_PROC_REALPATH = 163;
  GUESTFS_PROC_LN = 164;
  GUESTFS_PROC_LN_F = 165;
  GUESTFS_PROC_LN_S = 166;
  GUESTFS_PROC_LN_SF = 167;
  GUESTFS_PROC_READLINK = 168;
  GUESTFS_PROC_FALLOCATE = 169;
  GUESTFS_PROC_SWAPON_DEVICE = 170;
  GUESTFS_PROC_SWAPOFF_DEVICE = 171;
  GUESTFS_PROC_SWAPON_FILE = 172;
  GUESTFS_PROC_SWAPOFF_FILE = 173;
  GUESTFS_PROC_SWAPON_LABEL = 174;
  GUESTFS_PROC_SWAPOFF_LABEL = 175;
  GUESTFS_PROC_SWAPON_UUID = 176;
  GUESTFS_PROC_SWAPOFF_UUID = 177;
  GUESTFS_PROC_MKSWAP_FILE = 178;
  GUESTFS_PROC_INOTIFY_INIT = 179;
  GUESTFS_PROC_INOTIFY_ADD_WATCH = 180;
  GUESTFS_PROC_INOTIFY_RM_WATCH = 181;
  GUESTFS_PROC_INOTIFY_READ = 182;
  GUESTFS_PROC_INOTIFY_FILES = 183;
  GUESTFS_PROC_INOTIFY_CLOSE = 184;
  GUESTFS_PROC_SETCON = 185;
  GUESTFS_PROC_GETCON = 186;
  GUESTFS_PROC_MKFS_B = 187;
  GUESTFS_PROC_MKE2JOURNAL = 188;
  GUESTFS_PROC_MKE2JOURNAL_L = 189;
  GUESTFS_PROC_MKE2JOURNAL_U = 190;
  GUESTFS_PROC_MKE2FS_J = 191;
  GUESTFS_PROC_MKE2FS_JL = 192;
  GUESTFS_PROC_MKE2FS_JU = 193;
  GUESTFS_PROC_MODPROBE = 194;
  GUESTFS_PROC_ECHO_DAEMON = 195;
  GUESTFS_PROC_FIND0 = 196;
  GUESTFS_PROC_CASE_SENSITIVE_PATH = 197;
  GUESTFS_PROC_VFS_TYPE = 198;
  GUESTFS_PROC_TRUNCATE = 199;
  GUESTFS_PROC_TRUNCATE_SIZE = 200;
  GUESTFS_PROC_UTIMENS = 201;
  GUESTFS_PROC_MKDIR_MODE = 202;
  GUESTFS_PROC_LCHOWN = 203;
  GUESTFS_PROC_INTERNAL_LXATTRLIST = 205;
  GUESTFS_PROC_INTERNAL_READLINKLIST = 206;
  GUESTFS_PROC_PREAD = 207;
  GUESTFS_PROC_PART_INIT = 208;
  GUESTFS_PROC_PART_ADD = 209;
  GUESTFS_PROC_PART_DISK = 210;
  GUESTFS_PROC_PART_SET_BOOTABLE = 211;
  GUESTFS_PROC_PART_SET_NAME = 212;
  GUESTFS_PROC_PART_LIST = 213;
  GUESTFS_PROC_PART_GET_PARTTYPE = 214;
  GUESTFS_PROC_FILL = 215;
  GUESTFS_PROC_AVAILABLE = 216;
  GUESTFS_PROC_DD = 217;
  GUESTFS_PROC_FILESIZE = 218;
  GUESTFS_PROC_LVRENAME = 219;
  GUESTFS_PROC_VGRENAME = 220;
  GUESTFS_PROC_INITRD_CAT = 221;
  GUESTFS_PROC_PVUUID = 222;
  GUESTFS_PROC_VGUUID = 223;
  GUESTFS_PROC_LVUUID = 224;
  GUESTFS_PROC_VGPVUUIDS = 225;
  GUESTFS_PROC_VGLVUUIDS = 226;
  GUESTFS_PROC_COPY_SIZE = 227;
  GUESTFS_PROC_ZERO_DEVICE = 228;
  GUESTFS_PROC_TXZ_IN = 229;
  GUESTFS_PROC_TXZ_OUT = 230;
  GUESTFS_PROC_VGSCAN = 232;
  GUESTFS_PROC_PART_DEL = 233;
  GUESTFS_PROC_PART_GET_BOOTABLE = 234;
  GUESTFS_PROC_PART_GET_MBR_ID = 235;
  GUESTFS_PROC_PART_SET_MBR_ID = 236;
  GUESTFS_PROC_CHECKSUM_DEVICE = 237;
  GUESTFS_PROC_LVRESIZE_FREE = 238;
  GUESTFS_PROC_AUG_CLEAR = 239;
  GUESTFS_PROC_GET_UMASK = 240;
  GUESTFS_PROC_DEBUG_UPLOAD = 241;
  GUESTFS_PROC_BASE64_IN = 242;
  GUESTFS_PROC_BASE64_OUT = 243;
  GUESTFS_PROC_CHECKSUMS_OUT = 244;
  GUESTFS_PROC_FILL_PATTERN = 245;
  GUESTFS_PROC_INTERNAL_WRITE = 246;
  GUESTFS_PROC_PWRITE = 247;
  GUESTFS_PROC_RESIZE2FS_SIZE = 248;
  GUESTFS_PROC_PVRESIZE_SIZE = 249;
  GUESTFS_PROC_NTFSRESIZE_SIZE = 250;
  GUESTFS_PROC_AVAILABLE_ALL_GROUPS = 251;
  GUESTFS_PROC_FALLOCATE64 = 252;
  GUESTFS_PROC_VFS_LABEL = 253;
  GUESTFS_PROC_VFS_UUID = 254;
  GUESTFS_PROC_LVM_SET_FILTER = 255;
  GUESTFS_PROC_LVM_CLEAR_FILTER = 256;
  GUESTFS_PROC_LUKS_OPEN = 257;
  GUESTFS_PROC_LUKS_OPEN_RO = 258;
  GUESTFS_PROC_LUKS_CLOSE = 259;
  GUESTFS_PROC_LUKS_FORMAT = 260;
  GUESTFS_PROC_LUKS_FORMAT_CIPHER = 261;
  GUESTFS_PROC_LUKS_ADD_KEY = 262;
  GUESTFS_PROC_LUKS_KILL_SLOT = 263;
  GUESTFS_PROC_IS_LV = 264;
  GUESTFS_PROC_FINDFS_UUID = 265;
  GUESTFS_PROC_FINDFS_LABEL = 266;
  GUESTFS_PROC_IS_CHARDEV = 267;
  GUESTFS_PROC_IS_BLOCKDEV = 268;
  GUESTFS_PROC_IS_FIFO = 269;
  GUESTFS_PROC_IS_SYMLINK = 270;
  GUESTFS_PROC_IS_SOCKET = 271;
  GUESTFS_PROC_PART_TO_DEV = 272;
  GUESTFS_PROC_UPLOAD_OFFSET = 273;
  GUESTFS_PROC_DOWNLOAD_OFFSET = 274;
  GUESTFS_PROC_PWRITE_DEVICE = 275;
  GUESTFS_PROC_PREAD_DEVICE = 276;
  GUESTFS_PROC_LVM_CANONICAL_LV_NAME = 277;
  GUESTFS_PROC_MKFS = 278;
  GUESTFS_PROC_GETXATTR = 279;
  GUESTFS_PROC_LGETXATTR = 280;
  GUESTFS_PROC_RESIZE2FS_M = 281;
  GUESTFS_PROC_INTERNAL_AUTOSYNC = 282;
  GUESTFS_PROC_IS_ZERO = 283;
  GUESTFS_PROC_IS_ZERO_DEVICE = 284;
  GUESTFS_PROC_LIST_9P = 285;
  GUESTFS_PROC_MOUNT_9P = 286;
  GUESTFS_PROC_LIST_DM_DEVICES = 287;
  GUESTFS_PROC_NTFSRESIZE = 288;
  GUESTFS_PROC_BTRFS_FILESYSTEM_RESIZE = 289;
  GUESTFS_PROC_INTERNAL_WRITE_APPEND = 290;
  GUESTFS_PROC_COMPRESS_OUT = 291;
  GUESTFS_PROC_COMPRESS_DEVICE_OUT = 292;
  GUESTFS_PROC_PART_TO_PARTNUM = 293;
  GUESTFS_PROC_COPY_DEVICE_TO_DEVICE = 294;
  GUESTFS_PROC_COPY_DEVICE_TO_FILE = 295;
  GUESTFS_PROC_COPY_FILE_TO_DEVICE = 296;
  GUESTFS_PROC_COPY_FILE_TO_FILE = 297;
  GUESTFS_PROC_TUNE2FS = 298;
  GUESTFS_PROC_MD_CREATE = 299;
  GUESTFS_PROC_LIST_MD_DEVICES = 300;
  GUESTFS_PROC_MD_DETAIL = 301;
  GUESTFS_PROC_MD_STOP = 302;
  GUESTFS_PROC_BLKID = 303;
  GUESTFS_PROC_E2FSCK = 304;
  GUESTFS_PROC_LLZ = 305;
  GUESTFS_PROC_WIPEFS = 306;
  GUESTFS_PROC_NTFSFIX = 307;
  GUESTFS_PROC_NTFSCLONE_OUT = 308;
  GUESTFS_PROC_NTFSCLONE_IN = 309;
  GUESTFS_PROC_SET_LABEL = 310;
  GUESTFS_PROC_ZERO_FREE_SPACE = 311;
  GUESTFS_PROC_LVCREATE_FREE = 312;
  GUESTFS_PROC_ISOINFO_DEVICE = 313;
  GUESTFS_PROC_ISOINFO = 314;
  GUESTFS_PROC_VGMETA = 315;
  GUESTFS_PROC_MD_STAT = 316;
  GUESTFS_PROC_MKFS_BTRFS = 317;
  GUESTFS_PROC_GET_E2ATTRS = 318;
  GUESTFS_PROC_SET_E2ATTRS = 319;
  GUESTFS_PROC_GET_E2GENERATION = 320;
  GUESTFS_PROC_SET_E2GENERATION = 321;
  GUESTFS_PROC_BTRFS_SUBVOLUME_SNAPSHOT = 322;
  GUESTFS_PROC_BTRFS_SUBVOLUME_DELETE = 323;
  GUESTFS_PROC_BTRFS_SUBVOLUME_CREATE = 324;
  GUESTFS_PROC_BTRFS_SUBVOLUME_LIST = 325;
  GUESTFS_PROC_BTRFS_SUBVOLUME_SET_DEFAULT = 326;
  GUESTFS_PROC_BTRFS_FILESYSTEM_SYNC = 327;
  GUESTFS_PROC_BTRFS_FILESYSTEM_BALANCE = 328;
  GUESTFS_PROC_BTRFS_DEVICE_ADD = 329;
  GUESTFS_PROC_BTRFS_DEVICE_DELETE = 330;
  GUESTFS_PROC_BTRFS_SET_SEEDING = 331;
  GUESTFS_PROC_BTRFS_FSCK = 332;
  GUESTFS_PROC_FILESYSTEM_AVAILABLE = 333;
  GUESTFS_PROC_FSTRIM = 334;
  GUESTFS_PROC_DEVICE_INDEX = 335;
  GUESTFS_PROC_NR_DEVICES = 336;
  GUESTFS_PROC_XFS_INFO = 337;
  GUESTFS_PROC_PVCHANGE_UUID = 338;
  GUESTFS_PROC_PVCHANGE_UUID_ALL = 339;
  GUESTFS_PROC_VGCHANGE_UUID = 340;
  GUESTFS_PROC_VGCHANGE_UUID_ALL = 341;
  GUESTFS_PROC_UTSNAME = 342;
  GUESTFS_PROC_XFS_GROWFS = 343;
  GUESTFS_PROC_RSYNC = 344;
  GUESTFS_PROC_RSYNC_IN = 345;
  GUESTFS_PROC_RSYNC_OUT = 346;
  GUESTFS_PROC_LS0 = 347;
  GUESTFS_PROC_FILL_DIR = 348;
  GUESTFS_PROC_XFS_ADMIN = 349;
  GUESTFS_PROC_HIVEX_OPEN = 350;
  GUESTFS_PROC_HIVEX_CLOSE = 351;
  GUESTFS_PROC_HIVEX_ROOT = 352;
  GUESTFS_PROC_HIVEX_NODE_NAME = 353;
  GUESTFS_PROC_HIVEX_NODE_CHILDREN = 354;
  GUESTFS_PROC_HIVEX_NODE_GET_CHILD = 355;
  GUESTFS_PROC_HIVEX_NODE_PARENT = 356;
  GUESTFS_PROC_HIVEX_NODE_VALUES = 357;
  GUESTFS_PROC_HIVEX_NODE_GET_VALUE = 358;
  GUESTFS_PROC_HIVEX_VALUE_KEY = 359;
  GUESTFS_PROC_HIVEX_VALUE_TYPE = 360;
  GUESTFS_PROC_HIVEX_VALUE_VALUE = 361;
  GUESTFS_PROC_HIVEX_COMMIT = 362;
  GUESTFS_PROC_HIVEX_NODE_ADD_CHILD = 363;
  GUESTFS_PROC_HIVEX_NODE_DELETE_CHILD = 364;
  GUESTFS_PROC_HIVEX_NODE_SET_VALUE = 365;
  GUESTFS_PROC_XFS_REPAIR = 366;
  GUESTFS_PROC_RM_F = 367;
  GUESTFS_PROC_MKE2FS = 368;
  GUESTFS_PROC_LIST_DISK_LABELS = 369;
  GUESTFS_PROC_INTERNAL_HOT_ADD_DRIVE = 370;
  GUESTFS_PROC_INTERNAL_HOT_REMOVE_DRIVE_PRECHECK = 371;
  GUESTFS_PROC_INTERNAL_HOT_REMOVE_DRIVE = 372;
  GUESTFS_PROC_MKTEMP = 373;
  GUESTFS_PROC_MKLOST_AND_FOUND = 374;
  GUESTFS_PROC_ACL_GET_FILE = 375;
  GUESTFS_PROC_ACL_SET_FILE = 376;
  GUESTFS_PROC_ACL_DELETE_DEF_FILE = 377;
  GUESTFS_PROC_CAP_GET_FILE = 378;
  GUESTFS_PROC_CAP_SET_FILE = 379;
  GUESTFS_PROC_LIST_LDM_VOLUMES = 380;
  GUESTFS_PROC_LIST_LDM_PARTITIONS = 381;
  GUESTFS_PROC_LDMTOOL_CREATE_ALL = 382;
  GUESTFS_PROC_LDMTOOL_REMOVE_ALL = 383;
  GUESTFS_PROC_LDMTOOL_SCAN = 384;
  GUESTFS_PROC_LDMTOOL_SCAN_DEVICES = 385;
  GUESTFS_PROC_LDMTOOL_DISKGROUP_NAME = 386;
  GUESTFS_PROC_LDMTOOL_DISKGROUP_VOLUMES = 387;
  GUESTFS_PROC_LDMTOOL_DISKGROUP_DISKS = 388;
  GUESTFS_PROC_LDMTOOL_VOLUME_TYPE = 389;
  GUESTFS_PROC_LDMTOOL_VOLUME_HINT = 390;
  GUESTFS_PROC_LDMTOOL_VOLUME_PARTITIONS = 391;
  GUESTFS_PROC_PART_SET_GPT_TYPE = 392;
  GUESTFS_PROC_PART_GET_GPT_TYPE = 393;
  GUESTFS_PROC_RENAME = 394;
  GUESTFS_PROC_IS_WHOLE_DEVICE = 395;
  GUESTFS_PROC_INTERNAL_PARSE_MOUNTABLE = 396;
  GUESTFS_PROC_INTERNAL_RHBZ914931 = 397;
  GUESTFS_PROC_FEATURE_AVAILABLE = 398;
  GUESTFS_PROC_SYSLINUX = 399;
  GUESTFS_PROC_EXTLINUX = 400;
  GUESTFS_PROC_CP_R = 401;
  GUESTFS_PROC_REMOUNT = 402;
  GUESTFS_PROC_SET_UUID = 403;
  GUESTFS_PROC_JOURNAL_OPEN = 404;
  GUESTFS_PROC_JOURNAL_CLOSE = 405;
  GUESTFS_PROC_JOURNAL_NEXT = 406;
  GUESTFS_PROC_JOURNAL_SKIP = 407;
  GUESTFS_PROC_INTERNAL_JOURNAL_GET = 408;
  GUESTFS_PROC_JOURNAL_GET_DATA_THRESHOLD = 409;
  GUESTFS_PROC_JOURNAL_SET_DATA_THRESHOLD = 410;
  GUESTFS_PROC_AUG_SETM = 411;
  GUESTFS_PROC_AUG_LABEL = 412;
  GUESTFS_PROC_INTERNAL_UPLOAD = 413;
  GUESTFS_PROC_INTERNAL_EXIT = 414;
  GUESTFS_PROC_COPY_ATTRIBUTES = 415;
  GUESTFS_PROC_PART_GET_NAME = 416;
  GUESTFS_PROC_BLKDISCARD = 417;
  GUESTFS_PROC_BLKDISCARDZEROES = 418;
  GUESTFS_PROC_CPIO_OUT = 419;
  GUESTFS_PROC_JOURNAL_GET_REALTIME_USEC = 420;
  GUESTFS_PROC_STATNS = 421;
  GUESTFS_PROC_LSTATNS = 422;
  GUESTFS_PROC_INTERNAL_LSTATNSLIST = 423;
}

enum GUESTFS_CONST {
  
  GUESTFS_PROGRAM = 0x2000F5F5;
  GUESTFS_PROTOCOL_VERSION = 4;
  GUESTFS_MAX_CHUNK_SIZE = 8192;

/* These constants must be larger than any possible message length. */
  GUESTFS_LAUNCH_FLAG = 0x75f55ff5;
  GUESTFS_CANCEL_FLAG = 0x7fffeeee;
  GUESTFS_PROGRESS_FLAG = 0x7fff5555;

  GUESTFS_ERROR_LEN = 65536;

  GUESTFS_MAX_PROC_NR = 423;

/* The remote procedure call protocol. */

  GUESTFS_MESSAGE_MAX = 4194304;

}

enum GuestfsMessageDirection {
  GUESTFS_DIRECTION_CALL = 0;         /* client -> daemon */
  GUESTFS_DIRECTION_REPLY = 1;        /* daemon -> client */
}

enum GuestfsMessageStatus {
  GUESTFS_STATUS_OK = 0;
  GUESTFS_STATUS_ERROR = 1;
}

message GuestfsMessageError {
  required string errno_string = 1;           /* errno eg. "EINVAL", empty string
                                                 if errno not available */
  required string error_message = 2;
}

message GuestfsMessageHeader {
  required uint32 prog = 1;                         /* GUESTFS_PROGRAM */
  required uint32 vers = 2;                         /* GUESTFS_PROTOCOL_VERSION */
  required GuestfsProcedure proc = 3;              /* GUESTFS_PROC_x */
  required GuestfsMessageDirection direction = 4;
  required uint32 serial = 5;                       /* message serial number */
  required uint64 progress_hint = 6;                /* upload hint for progress bar */
  required uint64 optargs_bitmask = 7;              /* bitmask for optional args */
  required GuestfsMessageStatus status = 8;
}

message GuestfsChunk {
  required int32 cancel = 1;     /* if non-zero, transfer is cancelled */
  /* data size is 0 bytes if the transfer has finished successfully */
  required bytes data = 2;
}

/* Progress notifications.  Daemon self-limits these messages to
 * at most one per second.  The daemon can send these messages
 * at any time, and the caller should discard unexpected messages.
 * 'position' and 'total' have undefined units; however they may
 * have meaning for some calls.
 *
 * Notes:
 *
 * (1) guestfs___recv_from_daemon assumes the XDR-encoded
 * structure is 24 bytes long.
 *
 * (2) daemon/proto.c:async_safe_send_pulse assumes the progress
 * message is laid out precisely in this way.  So if you change
 * this then you'd better change that function as well.
 */
message GuestfsProgress {
  required GuestfsProcedure proc = 1;          /* @0:  GUESTFS_PROC_x */
  required uint32 serial = 2;                   /* @4:  message serial number */
  required uint64 position = 3;                 /* @8:  0 <= position <= total */
  required uint64 total = 4;                    /* @16: total size of operation */
                                                /* @24: size of structure */
}
